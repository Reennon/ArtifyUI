@page "/login"
@using UIArtify.Configurations
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using System.Net.Http.Headers
@using System.Net
@using System.Text
@using System.Threading
@using HttpClientService.Blazor
@using Microsoft.Net.Http.Headers
@using UIArtify.Interfaces
@using UIArtify.Services
@inject IOptions<Api> ApiOptions
@inject IApiService ApiService
@inject IJSRuntime JsRuntime
@inject HttpClient Http

<div class="container">
    <h1>Login</h1>
    <h3>Hello, @Email</h3>
    <h6>Login route @ApiOptions.Value.Login</h6>
    <input @bind="PreferenceName"/> preferenceName value: @PreferenceName<br/>
    <input @bind="Password"/> password value: @Password<br/>
    <input @bind="Email"/> email value: @Email<br/>
    <button class="btn btn-primary" @onclick="@(PostLogin)">Login</button>
    <button class="btn btn-primary" @onclick="@(()=>Console.WriteLine(Logout()))">Logout Service</button>
    <button class="btn btn-primary" @onclick="@(Smoke)">Smoke</button>
    @ApiService.HttpClient.DefaultRequestHeaders

    @JsonConvert.SerializeObject(
        new
        {
            preference_name = PreferenceName
            , email = Email
            , password = Password
        })))
</div>


@code {

    public String PreferenceName;
    public String Password;
    public String Email;

    private async Task<HttpResponseMessage> PostLogin()
    {
        var response = await Http.PostAsJsonAsync(
            ApiOptions.Value.Login,
            new
            {
                preference_name = PreferenceName        
                , email = Email       
                , password = Password        
            });
        var responseContent = await response.Content.ReadAsStringAsync();
        Http.DefaultRequestHeaders.TryAddWithoutValidation("Authorization", responseContent.Substring(1,responseContent.Length-3));

        return response;
    }

    private async Task Logout() {
        var response = await ApiService.HttpClient.SendAsync(new HttpRequestMessage
        {
            Method = HttpMethod.Get
            , RequestUri = new Uri(ApiOptions.Value.Logout)
        });
        
        Console.WriteLine(response.Content.ReadAsStringAsync().Result);
    }
    
    private async Task Smoke()
    {
        var response = await Http.GetAsync(ApiOptions.Value.Smoke);
        
        Console.WriteLine(response.Content.ReadAsStringAsync().Result);
    }
}