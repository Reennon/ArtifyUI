@using System.Reflection.Metadata.Ecma335


@inject IJSRuntime JsRuntime

<nav>

    <ul class="nav-links">
        <li><div class="col-md-1 ">
            <div  class="btn-toolbar">File</div>
        </div></li>
        <li><div  class="col-md-1 ">
            <div   class="btn-toolbar">Edit</div>
        </div></li>
        <li><div class="col-md-1">
            <div  class="btn-toolbar">View</div>
        </div></li>
        <li><div class="col-md-1">
            <div  class="btn-toolbar">Insert</div>
        </div></li>
        <li><div class="col-md-1">
            <div  class="btn-toolbar">Cell</div>
        </div></li>
        <li><div class="col-md-1">
            <div  class="btn-toolbar">Core</div>
        </div></li>
        <li><div class="col-md-1">
            <div id="Help" class="btn-toolbar">Help</div>
        </div></li>


    </ul>
    <div class="burger" @onclick="SideBar">
        <div class="line1"></div>
        <div class="line2"></div>
        <div class="line3"></div>
    </div>
    <ul class=" nav navbar-nav">
    <li id="run" >
        <div>
            <div class="col">
                <svg width="75" height="75" viewBox="0 0 75 75" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <rect width="132" height="111" transform="matrix(1 0 0 -1 -16 81)" fill="black" fill-opacity="0.8"/>
                        
                </svg>

            </div>
        </div>
    </li>
    </ul>


</nav>

@code
{

   
    
    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/isolated/EditorToolbar.razor.js").AsTask();
    async Task SideBar()
    {
        var module = await Module;
        await module.InvokeVoidAsync("navSlide");
    }
    
    
    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            await (await _module).DisposeAsync();
        }
    }

    


}

