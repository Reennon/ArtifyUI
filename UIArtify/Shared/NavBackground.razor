@using Microsoft.JSInterop.Implementation
@inject IJSRuntime JsRuntime
@implements IAsyncDisposable

@if (!_clicked)
{
    <div class="nav-menu-background" filter="blur" @onclick="Click">
        <div class="container nav-menu-foreground">
            <NavMenu/>
        </div>
    </div>
}


@code {
    Boolean _clicked;

    void Click()
    {
        Console.WriteLine(_clicked);
        _clicked = !_clicked;
    }
    private string _name;
    // Load the module and keep a reference to it
    // You need to use .AsTask() to convert the ValueTask to Task as it may be awaited multiple times
    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/isolated/NavBackground.razor.js").AsTask();

    private JSObjectReference JsModule { get; set; }

    protected override async Task OnInitializedAsync()
    {
        JsModule = await JsRuntime.InvokeAsync<JSObjectReference>("import", "./js/isolated/NavBackground.razor.js");
    }
    async Task Submit()
    {
        var module = await Module;
        await module.InvokeVoidAsync("sayHi", _name);
    }

    public async ValueTask DisposeAsync()
    {
        if (_module != null)
            await (await _module).DisposeAsync(); 
        
    }
}