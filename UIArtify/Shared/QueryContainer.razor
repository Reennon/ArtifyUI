@using UIArtify.Services
@using UIArtify.Configurations
@using Microsoft.Extensions.Options
@using BlazorDownloadFile
@using UIArtify.Interfaces
@inject IQueryService QueryService
@inject IOptions<Api> ApiOptions
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject IEditorRefresherService EditorRefresherService
@inject HttpClient Http
@implements UIArtify.Interfaces.IQuery

<div class="query-holder">
    <div class="row row-no-padding no-gutters">
        <div class="col-2 query-desc">
            <div class="query-desc-text">
                <span class="align-baseline">
                    In[@QueryService.LastQuery]:
                </span>
            </div>
            <div @onclick="@(Run)" style="color:black">Run</div>
        </div>
        <div class="col-10 query-text">
            <MonacoEditor
                ConstructionOptions = "EditorConstructionOptions"
                    OnDidChangeCursorPosition = "EditorDidChangeCursorPosition"
                CssClass="editor-style"
            />
        </div>
    </div>
    
</div>
@if (_initial)
{
    <div class="query-holder appear">
        <div class="row row-no-padding no-gutters">
            <div class="col-2 query-desc">
                <div class="query-desc-text">Out[@QueryService.LastQuery]:</div>
                <div @onclick="@(Close)" style="color:black">Close</div>
            </div>
            <div class="col-10 bg-black query-text editor-style" style="font-family: consolas;!important;
                                                                        font-size: 0.85rem;!important;
                                                                        padding-left: 1rem;!important;
                                                                        overflow: auto;
                                                                        min-height: 6.875rem;
                                                                        height: 6.875rem;">
                @((MarkupString)_queryOutput)
            </div>
        </div>
    </div>
}


@code {

    public UInt16 QueryNumber { get; set; }

    public String QueryText { get; set; }
    private Boolean _initial;
    private MonacoEditor _editor;
    private String _queryOutput;


    async Task Run()
    {
        Console.WriteLine(1);
        Console.WriteLine(QueryService.LastQuery++);
        var query = QueryService.LastQuery++;
        StateHasChanged();
        _initial = true;
        await _editor.Layout();
        //var content = new [] {await _editor.GetValue()};
        await QueryService.Post((query.ToString(), await _editor.GetValue(), "cs"), Http);
        await QueryService.RunBuild(Http, query.ToString());
        var result = await QueryService.Output(Http);
        _queryOutput = result;
        StateHasChanged();
    //Console.WriteLine(await _editor.GetValue());

    //QueryNumber = ++QueryService.LastQuery;
    }

    void Close()
    {
        StateHasChanged();
        _initial = false;
        _editor.Layout();
    }

    //async Task<Byte[]> Download()
    //{
    //BlazorDownloadFileService.DownloadFile()
        //return await QueryService!.Get(ApiOptions.Value.Build);
    //}
    

    public QueryContainer()
    {
        //QueryNumber = QueryService.LastQuery;
    //QueryNumber = QueryService.LastQuery++;
    }
    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        _editor = editor;
        EditorRefresherService.AddEditor(editor);
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "csharp",
            Value = "using System;\nConsole.WriteLine(\"Say Hello to the Artify!\");",

            Theme = "vs-dark",
            Minimap = new()
            {
                Enabled = false

            },
            ColorDecorators = true,
            QuickSuggestions = new()
            {
                Comments = true,
                Other = true,
                Strings = true
            },
            ParameterHints = new()
            {
                Enabled = true,
                Cycle = true
            },
            AutoIndent = true,
            FormatOnType = true,
            SmoothScrolling = true,
            TabCompletion = "on",
            Suggest = new()
            {
                ShowColors = true,
                ShowConstructors = true,
                ShowFields = true,
                ShowValues = true,
                FilterGraceful = true,
                InsertHighlight = true
            },
            ShowUnused = true,
            ScrollBeyondLastLine = false,
            Contextmenu = false

        };
    }

    private void EditorDidChangeCursorPosition(CursorPositionChangedEvent eventArgs)
    {
        Console.WriteLine("EditorDidChangeCursorPosition");
    }

}