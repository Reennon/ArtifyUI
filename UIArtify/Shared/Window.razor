@using UIArtify.Interfaces
@using System.Reflection
@inject IJSRuntime JsRuntime
@inject IEditorRefresherService EditorRefresherService


<div @onclick="DraggableWindow" id="@StyleId" class="window-holder">
    <div class="row row-no-padding no-gutters header-line">

        <div class="col ali" id="@(StyleId+"header")">
            <span class="align-middle tab-name">
                @TabName
            </span>
        </div>
        <div class="col bg-black d-flex button button-hide" @onclick="Hide">
            <div class="line-holder justify-content-center align-self-center">
                <div class="line"></div>
            </div>
        </div>

        @if (CloseButton)
        {
            <div class="col bg-red d-flex button button-close">
                <div class="line-holder justify-content-center align-self-center">
                    <div class="x-mark"></div>
                </div>
            </div>
        }
    </div>
    <div class="container content-wrapper scroller" id="@(StyleId+"body")">
        @ChildContent
    </div>
    <div class="window-footer row row-no-padding no-gutters"></div>
</div>


@code {

    [Parameter]
    public Boolean CloseButton { get; set; }

    [Parameter]
    public String TabName { get; set; } = "Empty";

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public String StyleId { get; set; }

    [Parameter]
    public String ParentId { get; set; }

    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/isolated/DraggableWindow.js").AsTask();
    
    async Task DraggableWindow()
    {
        
        
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        var module = await Module;
        var dotNetReference = DotNetObjectReference.Create(this);
        await module.InvokeVoidAsync("dragElement", ParentId, StyleId);
        await module.InvokeVoidAsync("resizeWatcher", StyleId+"body", dotNetReference);
    }

    [JSInvokableAttribute("BlazorWasmJSInteropEditor")]
    public void RefreshEditor() =>
        EditorRefresherService.RefreshEditor();
    
    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            await (await _module).DisposeAsync();
        }
    }

    async Task Hide()
    {
        var module = await Module;
        await module.InvokeVoidAsync("hideWindow", StyleId+"body");
    }

    
}